{
    "@typescript-eslint/adjacent-overload-signatures": "@off\n要求成员重载是连续的",
    "@typescript-eslint/array-type": "@fixable\n需要对数组使用T[]或数组<T> (TSLint中的数组类型).",
    "@typescript-eslint/ban-types": "@off\n@fixable\n设置禁止使用的类型",
    "@typescript-eslint/ban-ts-ignore": "@off\n禁止使用“/ / @ts-ignore”",
    "@typescript-eslint/camelcase": "@off\n执行camelCase命名约定",
    "@typescript-eslint/class-name-casing": "@off\n类和接口的命名必须遵守帕斯卡命名法，比如 PersianCat",
    "@typescript-eslint/explicit-function-return-type": "@off\n显示指定函数返回值类型，确保函数返回的值是预期的类型。",
    "@typescript-eslint/explicit-member-accessibility": "@off\n用 private / public等可访问性修饰符",
    "@typescript-eslint/indent": "@off\n@fixable\n设置禁止使用的类型\nindent === 2",
    "@typescript-eslint/interface-name-prefix": "@off\n强制设置接口名是否以 ‘I’ 开头",
    "@typescript-eslint/member-delimiter-style": "@off\n@fixable\n在接口和类型文字中强制使用一致的成员分隔符样式\n遵循prettier的样式规则，多行无分号，单行分号分割。",
    "@typescript-eslint/no-angle-bracket-type-assertion": "@off\n强制使用as类型断言代替<Type>断言(无角度括号类型断言)",
    "@typescript-eslint/no-array-constructor": "@fixable\n禁止使用 Array 构造函数来初始化数组，除非指定了泛型，或传入的是单个数字",
    "@typescript-eslint/no-empty-interface": "禁止声明空接口,接口",
    "@typescript-eslint/no-explicit-any": "@off\n禁止使用any",
    "@typescript-eslint/no-inferrable-types": "@off\n@fixable\n禁止显式类型声明为变量或参数初始化为一个数字,字符串,或布尔",
    "@typescript-eslint/no-misused-new": "强制执行new和构造函数的有效定义",
    "@typescript-eslint/no-namespace": "a\n@off If you are using the ES2015 module syntax, then you will not need this rule.\n标准化模块的声明方式。\ngood: declare module 'foo' {}\nbad: declare module foo {}\n     declare namespace foo {",
    "@typescript-eslint/no-non-null-assertion": "@off\n禁止使用 ！进行非空断言",
    "@typescript-eslint/no-object-literal-type-assertion": "@off\n禁止对象文字出现在类型断言表达式中(无对象文字类型断言)",
    "@typescript-eslint/no-parameter-properties": "a\n@off\n禁止在构造函数中使用参数属性，强制用户显式声明类中的所有属性。\n如：readonly、public、private",
    "@typescript-eslint/no-require-imports": "@off\n比起require()，更喜欢较新的es6的导入。",
    "@typescript-eslint/no-triple-slash-reference": "禁止三斜杠引入方式，如 /// <reference path=\"\" />\n用import",
    "no-unused-vars": "设置禁止使用的类型\n'@typescript-eslint/no-type-alias': 'error',\n@fixable\n设置禁止使用的类型\n'@typescript-eslint/no-unnecessary-qualifier': 'error',\n@fixable\n设置禁止使用的类型\n'@typescript-eslint/no-unnecessary-type-assertion': 'error',\n@off 覆盖eslint的no-unused-vars\n定义过的变量必须使用",
    "@typescript-eslint/no-unused-vars": "定义过的变量必须使用(解决了 enum 问题)",
    "@typescript-eslint/no-use-before-define": "@off\neslint的no-unused-vars 已经有了",
    "@typescript-eslint/no-var-requires": "@off\nvar foo = require(\"foo\") is bad\nrequire(\"foo\") OR import foo = require(\"foo\") is OK\n要求过于严格，webpack等配置文件中较为常用",
    "@typescript-eslint/prefer-interface": "@off\n@fixable\n接口通常比类型文字更受欢迎，因为接口可以实现、扩展和合并。",
    "@typescript-eslint/prefer-namespace-keyword": "@fixable\nuse namespace instead of module\n为了防止自定义TypeScript模块和新的ES2015模块之间的进一步混淆，\n从TypeScript v1.5开始，namespace 是声明自定义TypeScript模块的首选方法",
    "@typescript-eslint/type-annotation-spacing": "@off\n@fixable\n类型声明 ： 前后要保持一致的类型\n遵循prettier，如： let a: string = 'abc'"
}